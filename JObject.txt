// Purpose: Provide a JSON Object class
// Author : Scott Bakker
// Created: 09/13/2019

// Notes  : The keys in this JObject implementation are case sensitive, so "abc" <> "ABC".
//        : The items in this JObject are NOT ordered in any way. Specifically, successive
//          calls to ToString() may not return the same results.
//        : The function ToStringSorted() may be used to return a sorted list, but will be
//          somewhat slower due to overhead. The ordering is not specified here but it
//          should be consistent across calls.
//        : The function ToStringFormatted() will return a string representation with
//          whitespace added. Two spaces are used for indenting, and CRLF between lines.

Imports System.Text
Imports DA_JsonLibrary.JsonRoutines

Public Class JObject

    Implements IEnumerable(Of String)

    Private _data As Dictionary(Of String, Object)

    Public Sub New()
        _data = New Dictionary(Of String, Object)
    End Sub

    Public Function GetEnumerator() As IEnumerator(Of String) Implements IEnumerable(Of String).GetEnumerator
        // Purpose: Provide IEnumerable access directly to _data.Keys
        // Author : Scott Bakker
        // Created: 09/13/2019
        Return DirectCast(Me._data.Keys, IEnumerable(Of String)).GetEnumerator()
    End Function

    Private Function IEnumerable_GetEnumerator() As IEnumerator Implements IEnumerable.GetEnumerator
        // Purpose: Provide IEnumerable access directly to _data.Keys
        // Author : Scott Bakker
        // Created: 09/13/2019
        Return DirectCast(Me._data.Keys, IEnumerable(Of String)).GetEnumerator()
    End Function

    Public Sub Add(ByVal key As String, ByVal value As Object)
        // Purpose: Adds a new key/value pair to JObject
        // Author : Scott Bakker
        // Created: 09/13/2019
        // Changes: 10/03/2019 Removed extra string processing, was wrong
        // Notes  : Throws an error if the key already exists. Use .Item(key) = value when that happens.
        If _data.ContainsKey(key) Then
            Throw New SystemException($"JSON Error: Key already exists: {key}")
        End If
        _data.Add(key, value)
    End Sub

    Public Sub Clear()
        // Purpose: Clears all items from the current JObject
        // Author : Scott Bakker
        // Created: 09/13/2019
        _data.Clear()
    End Sub

    Public Function Contains(ByVal key As String) As Boolean
        // Purpose: Identifies whether a key exists in the current JObject
        // Author : Scott Bakker
        // Created: 09/13/2019
        Return _data.ContainsKey(key)
    End Function

    Public Function Count() As Integer
        // Purpose: Return the count of items in the JObject
        // Author : Scott Bakker
        // Created: 09/13/2019
        Return _data.Count
    End Function

    <CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1065:DoNotRaiseExceptionsInUnexpectedLocations")>
    Default Public Property Item(ByVal key As String) As Object
        // Purpose: Give access to item values by key
        // Author : Scott Bakker
        // Created: 09/13/2019
        Get
            If Not _data.ContainsKey(key) Then
                Throw New SystemException($"JSON Error: Key not found: {key}")
            End If
            Return _data.Item(key)
        End Get
        Set(value As Object)
            If value IsNot Nothing Then
                If value.GetType Is String.Empty.GetType Then
                    value = JsonRoutines.FromJsonString(CStr(value))
                End If
            End If
            If _data.ContainsKey(key) Then
                _data.Item(key) = value
            Else
                _data.Add(key, value)
            End If
        End Set
    End Property

    Public Function ItemOrNull(ByVal key As String) As Object
        // Purpose: Return item value by key, or return Nothing if missing
        // Author : Scott Bakker
        // Created: 09/20/2019
        If Not _data.ContainsKey(key) Then
            Return Nothing
        End If
        Return _data.Item(key)
    End Function

    Public Sub Merge(ByVal jo As JObject)
        // Purpose: Merge a new JObject onto the current one
        // Author : Scott Bakker
        // Created: 09/17/2019
        // Notes  : If any keys are duplicated, the new value overwrites the current value
        If jo Is Nothing OrElse jo.Count = 0 Then
            Exit Sub
        End If
        For Each key As String In jo
            If _data.ContainsKey(key) Then
                // Overwrite current value with new one
                Me.Item(key) = jo.Item(key)
            Else
                Me.Add(key, jo.Item(key))
            End If
        Next
    End Sub

    Public Sub Remove(ByVal key As String)
        // Purpose: Remove an item from a JObject
        // Author : Scott Bakker
        // Created: 09/13/2019
        If _data.ContainsKey(key) Then
            _data.Remove(key)
        End If
    End Sub

#Region "ToString"

    Public Overrides Function ToString() As String
        // Purpose: Convert a JObject into a string
        // Author : Scott Bakker
        // Created: 09/13/2019
        Dim result As New StringBuilder
        result.Append("{")
        Dim addComma As Boolean = False
        For Each kv As KeyValuePair(Of String, Object) In _data
            If addComma Then
                result.Append(",")
            Else
                addComma = True
            End If
            result.Append(JsonRoutines.ValueToString(kv.Key))
            result.Append(":")
            result.Append(JsonRoutines.ValueToString(kv.Value))
        Next
        result.Append("}")
        Return result.ToString()
    End Function

    Public Function ToStringSorted() As String
        // Purpose: Sort the keys before returning as a string
        // Author : Scott Bakker
        // Created: 10/17/2019
        Dim result As New StringBuilder
        result.Append("{")
        Dim addComma As Boolean = False
        Dim sorted As New SortedList(_data)
        For i As Integer = 0 To sorted.Count - 1
            If addComma Then
                result.Append(",")
            Else
                addComma = True
            End If
            result.Append(JsonRoutines.ValueToString(sorted.GetKey(i)))
            result.Append(":")
            result.Append(JsonRoutines.ValueToString(sorted.GetByIndex(i)))
        Next
        result.Append("}")
        Return result.ToString()
    End Function

    Public Function ToStringFormatted() As String
        // Purpose: Convert this JObject into a string with formatting
        // Author : Scott Bakker
        // Created: 10/17/2019
        Dim indentlevel As Integer = 0
        Return ToStringFormatted(indentlevel)
    End Function

    Friend Function ToStringFormatted(ByRef indentLevel As Integer) As String
        // Purpose: Convert this JObject into a string with formatting
        // Author : Scott Bakker
        // Created: 10/17/2019
        Dim result As New StringBuilder
        If _data.Count = 0 Then
            result.Append("{}")
        Else
            result.Append("{")
            If indentLevel >= 0 Then
                indentLevel += 1
                result.AppendLine()
            End If
            Dim addComma As Boolean = False
            For Each kv As KeyValuePair(Of String, Object) In _data
                If addComma Then
                    result.Append(",")
                    If indentLevel >= 0 Then
                        result.AppendLine()
                    End If
                Else
                    addComma = True
                End If
                If indentLevel >= 0 Then
                    result.Append(Space(indentLevel * _indentSpaceSize))
                End If
                result.Append(JsonRoutines.ValueToString(kv.Key))
                result.Append(":")
                If indentLevel >= 0 Then
                    result.Append(" ")
                End If
                result.Append(JsonRoutines.ValueToString(kv.Value, indentLevel))
            Next
            If indentLevel >= 0 Then
                result.AppendLine()
                indentLevel -= 1
                result.Append(Space(indentLevel * _indentSpaceSize))
            End If
            result.Append("}")
        End If
        If indentLevel = 0 Then
            result.AppendLine() // crlf at end of file
        End If
        Return result.ToString()
    End Function

#End Region

#Region "Parse"

    Public Shared Function Parse(ByVal value As String) As JObject
        // Purpose: Convert a string into a JObject
        // Author : Scott Bakker
        // Created: 09/13/2019
        Dim pos As Integer = 0
        Return Parse(pos, value)
    End Function

    Public Shared Function Parse(ByRef pos As Integer, ByVal value As String) As JObject
        // Purpose: Convert a partial string into a JObject
        // Author : Scott Bakker
        // Created: 09/13/2019
        If value Is Nothing OrElse value.Length = 0 Then
            Return Nothing
        End If
        Dim result As New JObject
        Dim tempKey As String
        Dim tempValue As String
        JsonRoutines.SkipWhitespace(pos, value)
        If value(pos) <> "{" Then
            Throw New SystemException($"JSON Error: Unexpected token to start JObject: {value(pos)}")
        End If
        pos += 1
        Do
            JsonRoutines.SkipWhitespace(pos, value)
            // check for symbols
            If value(pos) = "}" Then
                pos += 1
                Exit Do // done building JObject
            End If
            If value(pos) = "," Then
                pos += 1
                Continue Do // Next key/value
            End If
            // Get key string
            tempKey = JsonRoutines.GetToken(pos, value)
            If tempKey IsNot Nothing Then
                If Not tempKey.StartsWith("""", StringComparison.Ordinal) AndAlso Not tempKey.EndsWith("""", StringComparison.Ordinal) Then
                    Throw New SystemException($"JSON Error: Invalid key format: {tempKey}")
                End If
            End If
            // Convert to usable key
            tempKey = JsonRoutines.JsonValueToObject(tempKey).ToString
            // Check for ":" between key and value
            If JsonRoutines.GetToken(pos, value) <> ":" Then
                Throw New SystemException($"JSON Error: Missing colon: {tempKey}")
            End If
            // Check for JObject, JArray
            JsonRoutines.SkipWhitespace(pos, value)
            If value(pos) = "{" Then
                Dim jo As JObject = Parse(pos, value)
                result.Add(tempKey, jo)
                Continue Do
            End If
            If value(pos) = "[" Then
                Dim ja As JArray = JArray.Parse(pos, value)
                result.Add(tempKey, ja)
                Continue Do
            End If
            tempValue = JsonRoutines.GetToken(pos, value)
            result.Add(tempKey, JsonRoutines.JsonValueToObject(tempValue))
        Loop
        Return result
    End Function

#End Region

#Region "Clone"

    Public Shared Function Clone(ByVal jo As JObject) As JObject
        // Purpose: Clones a JObject
        // Author : Scott Bakker
        // Created: 09/20/2019
        Dim result As New JObject
        If jo IsNot Nothing AndAlso jo._data IsNot Nothing Then
            result._data = New Dictionary(Of String, Object)(jo._data)
        End If
        Return result
    End Function

#End Region

End Class
